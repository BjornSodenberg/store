import { User } from '../types';
import { updateUser } from '../../../utils/firebase';
import { useState } from 'react';

import './styles.css'

type Props = {
    user: User;
    updateUser: () => void;
}

const EditUserForm = (props: Props) => {
    const { user } = props;
    const [lemons, setLemons] = useState<string>();
    const [diamonds, setDiamonds] = useState<string>();
    const [error, setError] = useState<string>('');

    const updateLemons = () => {
        if (!lemons) {
            setError('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
            return;
        }
        const upd: User = user;
        const newValue = lemons ? user.lemons + parseInt(lemons): user.lemons;
        if (newValue < 0) {
            setError('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ª–∏–º–æ–Ω–æ–≤');
            return;
        } else {
            upd.lemons = newValue;
            updateUser(upd);
            props.updateUser();
            setError('');
            setLemons('');
        }
    }

    const updateDiamonds = () => {
        if (!diamonds) {
            setError('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
            return;
        }
        const upd: User = user;
        const newValue = diamonds ? user.diamonds + parseInt(diamonds): user.diamonds;
        if (newValue < 0) {
            setError('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –∞–ª–º–∞–∑–æ–≤');
            return;
        } else {
            upd.diamonds = newValue;
            updateUser(upd);
            props.updateUser();
            setError('');
            setLemons('');
        }
    }

    return (
        <div className='user'>
            <div className='user-info'>
                <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ</h2>
                <p>ID: {user?.id}</p>
                <p>Email: {user?.email}</p>
                <p>
                    –õ–∏–º–æ–Ω–æ–≤: {user?.lemons}
                    {
                        lemons && (
                            parseInt(lemons) > 0 ? <span className='l-info positive'> +{lemons}</span> : <span className='l-info negative'> {lemons}</span>
                        )
                    }
                </p>
                <p>–ê–ª–º–∞–∑–æ–≤: {user?.diamonds}</p>
            </div>
            <div className='user-wallet'>
                <p className='user-wallet-header'>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã</p>
                <div className='buttons'>
                    <p className='description'>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>
                    <div className='lemons'>
                        <input 
                            type="number" 
                            className='wallet-input'
                            placeholder='100'
                            onChange={(e) => setLemons(e.target.value)}
                            value={lemons}
                        />
                        <button onClick={updateLemons} className='button wallet-button'>üçã</button>
                    </div>
                    <div className='diamonds'>
                        <input 
                            type="number" 
                            className='wallet-input'
                            placeholder='100'
                            onChange={(e) => setDiamonds(e.target.value)}
                            value={diamonds}
                        />
                        <button onClick={updateDiamonds} className='button wallet-button'>üíé</button>
                    </div>
                    {
                        error && (
                            <p className='error'>{error}</p>
                        )
                    }
                </div>
            </div>
        </div>
    )
}

export default EditUserForm;
